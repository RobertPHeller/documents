   Introduction

    

   In the June issue of Scale Rails, Didrik Voss introduced readers to some of the issues involved in
   developing an accessory bus for model railroad layouts.  He outlined the history of DCC and his wish to
   develop a similar standard local control bus (LCB), and the initial mandate of the NMRA Net Working
   Group to be used as a guide to he development of such a bus.  

    

   He also described one of the proposals, S9.5, in the article.  This article picks up from there and
   describes another effort, called OpenLCB, and the S9.6 proposal being developed.

    

    

   S9.6 / OpenLCB Proposal

    

   To be a good value for model railroaders, a new model railroad control bus and the pieces it connects
   should be usable for 20 years or more.  DCC, for example, has been in use since the early 90's, and
   although modern parts can do many things that weren't imagined back then, early and recent DCC decoders
   and systems generally work together fine.

    

   At the same time, technology is moving forward quickly.  The microprocessors that are in DCC decoders
   today are much more powerful than the ones that were available when DCC was standardized. To have a long
   life and do neat things, a new layout control bus should be able to take advantage of new technologies
   as they become available.

    

   Finally, we have to remember the goal:  The layout control bus exists to make it easy and cheap for a
   model railroader to get his layout to work exactly as he wants it to, without having to do a lot of
   complex things.  Only a very few of us consider complex electronics to be a big part of the hobby.  For
   most people, the most important thing a layout control bus can do is to hide all the electronic
   complexity by having the system itself handle the details for them.  DCC is an example of both success
   and failure in this respect.  It's a success, because it lets you run multiple engines independently,
   without the complexity of DC blocks, switches to route multiple DC throttles to each block, etc. At the
   same time, many modelers view the CV method of configuring locomotives to complicated and too much
   trouble.  Programs like DecoderPro have been created by model railroaders to smooth over that
   complexity, but there are limits to what DecoderPro and its ilk can do given how DCC was defined.  A new
   layout control bus should be designed to remove those issues, and enable simplicity in its future
   growth.

    

   The OpenLCB team has put a lot of thought and experimentation into these hard problems, so as to create
   an integrated solution that will serve novices to experts, and small to large layouts.  We have
   concentrated on providing strong solutions in these areas:

    

    1. Simplicity for the first time user: A novice can buy two S9.6 products from different manufacturers,
       hook them together and simply teach them to interact with a few button pushes.  No computers or
       control units needed to hook up something to control your yard throat, for example.

    2. Simplifying modular layout meets: S9.6 prevents conflict between the control units on existing
       modules, even for modules that are brought together from different groups.   Meet organizers do not
       need to pre-assign addresses or keep lists of numbers for their control systems. The module owners
       just plug modules together, and have a working common control system.  They can then quickly and
       easily set up any cross-module controls that need to be added for the meet, without worrying about c

    3. Able to grow to support even the largest layouts: As time goes on, layouts get bigger and have more
       things to control.  More layouts have signals, for example, and the signals are becoming more
       prototypical and complex. S9.6 starts with a very fast connection, the controller area network (CAN)
       described by Di Voss in the June article. On top of that, the S9.6 proposal provides ways to grow to
       even faster ones, for example Ethernet, when it becomes available; to automatically interconnect
       multiple CAN segments (cables) when layouts outgrow using just one, and to automatically reduce
       traffic on the layout control bus by reducing un-needed transmissions.  Key to all this are the
       OpenLCB methods for doing this automatically, so it doesn't require the model railroader to learn
       how to do complex configuration.

    4. Cost effective: S9.6 efficiently bridges to legacy equipment maintaining your prior investments.

    5. Controlling complexity with tools.  

    

   Key to all this are the OpenLCB methods for doing this automatically, so it doesn't require the model
   railroader to learn how to do complex configuration.

    

   Simplicity when things are new or small:

    

   S9.6 simplifies life for the novice.  Nodes come pre-loaded  with serial numbers from the factory.  The
   novice can simply plug nodes together, program them, and immediately control his accessories.  Nodes can
   be programmed with as few as two push-buttons using what we call the Blue-Gold method.  The diagram
   shows two simple nodes.  

    

   Support when things are big:

    

   S9.6 has ample room for growth, and can easily handle large layouts including museum layouts and large
   modular layouts, such as occur at annual meets of Ntrak in North America and Fremo in Europe., see the
   picture to the right).  Clubs nodes cannot conflict, even when multiple clubs get together with modules
   that were programmed at home, because all nodes have guaranteed different serial and event numbers.   In
   addition, none of the modules will need to be re-programmed since there is no chance of a conflict.  The
   exception to this is, of course, teaching some new interactions between the modules.  The meet's
   organizers will not have to keep lists of numbers, nor pre-allocate module numbers,  channels numbers,
   or events.  S9.6 also automates and simplifies the set-up and configuration of the modules, allowing the
   meet organizers to drill down into the individual modules, if necessary.   

    

   Correcting when things are too full or too busy:

    

   S9.6 can start as one segment consisting of two nodes or multiple segments connected by a fast S9.6 bus.
    If a segment gets too many nodes, or too much traffic, it can be split into two segments.  Multiple
   segments can be joined by repeater- or bridge-nodes that can automatically filter and route traffic to
   just those segments and nodes that need it.  

   Protect your investment:

    

   S9.6 let's you keep using your legacy equipment.  Intelligent bridges connect to it and integrate its
   devices right into the S9.6 protocol by including the it inside S9.6's messages.  For example, DCC
   accessory commands are converted to S9.6 events and they can address accessories on the LCB.   Other
   buses expected to be supported are Loconet, Xpressnet, NCR's throttle bus and  C\MRI.    

    

   Control when things are complex:

    

   Layouts have a habit of growing, both in extent and in complexity.  The S9.6 group has designed S9.6 to
   allow multiple computers to connect to your layout to help design, configure, debug, and if you want, to
   operate your layout.  

    

    

   How does it all work?

    

   Big Node Numbers

    

   Each S9.6 node has an identifying number called its ID, which is essentially its serial number, which is
   unique to it in the whole world.  This means that you do not need to supply an ID for it, and will never
   have to deal directly with it.  S9.6 node IDs are 48-bit numbers, and each anyone that builds S9.6 nodes
   is given a large batch of serial numbers that they can assign to their nodes.  Each manufacturer is
   assigned IDs, and even you, if you want to build your own nodes, has reserved series of IDs.    

    

   This is similar to the way cell phones work, for example.  They're all given unique numbers when they're
   manufactured, so that the companies can keep track of which one is where without ever having to worry
   about duplicate phones.  At the same time, you don't have to worry about that long serial number because
   it's entirely managed automatically by the cell phone and the system.  They know how to talk to each
   other, and that's enough for you.

    

   Big Events

    

   The main workhorse on a S9.6 LCB is a “token”, which is represented by a number that is unique to that
   specific event (yes, in the whole world).  One or more nodes can send a token in a message (producers),
   and all the nodes configured with the matching token will listen (consumers).  For example, two buttons
   on either side of a peninsula might set the turnouts in a station to the main line, or a BOD might turn
   a signal red.  

    

   Configuration tools, either build into the S9.6 nodes or separate, configure the token numbers to set up
   these control connections across the layout.  Unless they really want to, users don't need to worry
   about the specific numbers for tokens, because the nodes exchange them as needed to do the setup.
    Again, think of a cell phone analogy:  If you get a call from me on your phone, you can tell the phone
   to remember my number from now on.  You, the phone user, don't have to remember 10 digit numbers since
   the phone has the technology to do it for you. You just look up somebody's name and press dial.

    

   One of the main differences between S9.6 and other buses is that we use very big numbers for tokens:
   64-bits long.  This has some distinct advantages technical advantages: nodes can automatically assign a
   unique event number whenever one is needed, so the user doesn't need to think one up nor record it.  Any
   node can teach its events to any other node(s), whether it or they be consumers or producers, in one
   teaching session.  

    

   Another advantage is we can place such things as fast-clock time, RFID numbers, and other bus's messages
   right inside S9.6 events, letting nodes respond to these just like any other event, without needing any
   extra programming to make it happen. This kind of flexibility & capacity for future growth is key to
   creating a layout control bus that will last for more than 20 years.

    

    

   A message for all sizes of messages

    

   Besides events, S9.6 also uses datagrams and streams to carry larger messages.  Datagrams can send up to
   72 bytes of information between two nodes in a single operation.  Streams can send  messages from one
   node to another continuously.  

    

   Control of size and of traffic

    

   Layouts will grow to the point where there is too many nodes on it or too much traffic.  S9.6 is
   designed to alleviate both of these problems.  The solution to too many nodes is to split the bus into
   segments.  S9.6 was designed from the ground up run efficiently on a segmented bus.  It use of a large
   flat ID-space simplifies the problems inherent in this situation, without the need to extend the node or
   event IDs, as in other schemes.  

    

   While CAN will likely be used in small and medium sized layouts, we believe that a faster bus will be
   required.  For this reason, S9.6 is also implemented on Ethnernet.  This allows the connection of
   multiple CAN segments through gateways.  To help with traffic overload, S9.6 implements automatic
   analysis, filtering and routing of message traffic such that messages only go to nodes and segments that
   need them – this is called interest-based routing – and reduces segment traffic to mostly local
   messages.      

    

   Figures:

    

    

   graphics1

    

    

    

    

    

    

    
