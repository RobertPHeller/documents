   1. NMRAnet TM Introduction

   This document describes NMRAnet, a local control bus developed as a parallel to locomotive control, such
   as DC and DCC.  

                                                2. Transports

   Although NMRAnet is designed to operate on multiple transports, this document will be limited to
   descriptions of the protocol adapted to CAN and Ethernet.  

   CAN Standard Version 2.0 A&B shall be adhered to for all signals on the CAN bus.  The CAN Extended frame
   shall be used by NMRAnet to transfer data.

   Ethernet standards are adhered to in the adaptation of NMRAnet to it.  

                                     3. Common Protocol Frame Definition

   The Common protocol describes the generalized protocol that is not directed at a specific transport.
    The following is the Common Protocol Frame Definition:

   <MTI:16><sNID:48>{<dNID:48>}{<Flags:8}<Length:16><Data:0-2k>
   Where:
   MTI – message type indicator
   sNID = source node-ID
   dNID = destination node-ID
   Length – length of data bytes
   Data – data associated with the message

MTI – Message Type Identifier:

   <00110><pri:2><0><type:4><0><DID:1><EV:1><Flags:1>
   Where:
   <00110> - reserved field, must be checked
   <pri:2> - priority, 00 is high, 11 is low
   <0> - reserved
   <type:4> - type of message
   <0> - reserved
   <DID:1> - Destination node ID indicator, 0=not present, 1=present
   <EID:1> - Event ID indicator, 0=not present, 1=present
   <FLAGS:1> - flags-byte indicator, 0=not present, 1=present
   Notes:

    1. If the DID is present, it must be mappable to the full NID., and is located at the start of the
       data-part;

    2. If the EID is present, it follows the EID, if present, else is located at the start of the
       data-part;

    3.  If the flag-byte is present, the low bits of it may be relocated in CAN messages.   

sNID – Source Node ID:

   The can be the full node ID (48-bits) or an alias on some transports, such as CAN.  It must be
   translatable between the two forms.  

dNID – Destination Node ID:

   This is an optional field, and its presence is indicated by the DID-bit in the MTI.  

Event ID:

   This is an optional field, and its presence is indicated by the EID-bit in the MTI.  

Flags-byte:

   This is an optional field, and its presence is indicated by the Flags-bit in the MTI.  

Data:

   This is an optional field, and can be up to 2k in length.  

                                              4. Common Protocol

   The common Protocol has three basic message types:

     * Events: <00110><pri:2><0><xxxx><0010><sNID><event#>

     * Datagrams: <00110><pri:2><0><yyyy><0z00><sNID>{<dNID>}<data:0-2k>

     * Streams: <00110><pri:2><0><zzzz><0100><sNID><dNID><data:0-2k>

                                               5. CAN Protocol

   The CAN-specific adaptation of the Common Protocol is described in this section.

   The general CAN format used is the 29-bit variant:
   [<header:29>](<length:4>) <datapart:0-64>
   Where:
   <header:29> - 29-bit header, enclosed in []
   <lenght:4> - number of data bytes, enclosed in ()
   <datapart:0-64> - data-bytes, 0-8

   The description of the OpenLCB CAN packets uses the following abbreviations:

     * NIDa – a 12-bit alias for the full NID (node ID)

     * sNIDa – the soure-node-ID's alias

     * dNIDa – the destination-node-ID's alias

     * format – 3-bit field that determines the packet format

     * type– 8-bit message type indicator

     * flags – 4-bit field that carries specific message flag bits

Forms:

   Adaptation of the OpenLCB Common Protocol messages uses a general form:
   [<format:3><variableField:12><sNIDa>](len:4>)<data:0-64>

    This is divided into two main sub-forms, with different uses for the variableField:

     * Those messages without a source-node ID:  [<format:3><type:8><flags:4><sNIDa>](len:4>)<data:0-64>

     * And those with a source-node ID:
       [<format:3><dNIDa:12><sNIDa>](len:4>)<mti:8><data:0-56>   

Formats:

   The 3-bit format field determines how the rest of the packet is interpreted:

     * 0 0b000 Simple MTI

     * 1 0b001 Complex MTI, includes full source node ID

     * 2 0b010 reserved

     * 3 0b011 reserved

     * 4 0b100 Datagram frame fragment, continuing

     * 5 0b101 Datagram frame, last fragment

     * 6 0b110 Destination, non-stream

     * 7 0b111 Destination, stream

Basic Messages:

   This section describes the three basic types of messages that as a basis for operation and layered
   protocols.  

   Events

   Event-messages implement Producer-Consumer Events.  They are the work-horse of operations and implement
   m:n relationships.  They are also used for embedded information, such as fast-clock-time, and to port
   other foreign event protocols to OpenLCB by embedding.   

   [<pri><0><0x02D><sNIDa:12>]<8><event:64>

   Datagrams

   Datagrams are used to sent small amounts of data, between 1 and 72 bytes, between nodes.  Since CAN
   packets are limited to a 8-byte datapart, the Common Message Datagram is implemented as a set of
   'middle'-packets, and ending with an 'end'-packet.  

      Middle packets:

   [<pri><4><sNIDa:12><dNIDa:12>](<len:4>)<data:0-64>

       End packet:

   [<pri><5><sNIDa><dNIDa>](<len:4>)<data:8-64>

   Streams

   Streams are designed for sending large amounts of data between two nodes as a continuous stream of
   messages.  CAN packets are limited to 8-bytes in the datapart.  Because of buffering concerns, strams
   involve a significant set-up overhead in order to negotiate buffer-sizes across multiple segments.
    These  stream-management packets are described later.  

   [<pri><7><dNIDa:12><sNIDa:12>](<len:4>)<data:0-64>

    

Management Messages:

   Initialization complete
   This packet indicates that a node has completed its initialization.  

   [<pri><1><0x008><sNIDa>](6) NID

   Verify Node ID Number
   Request verification responses from a specific or all nodes.

   [<pri><6><dNIDa><sNIDa>](1) 0x0A – specific node

   [<pri><0><0x0AF><sNIDa>](0) - all nodes

   Verified Node ID Number
   Requset a response wrt its node ID from a specific node.

   [<pri><1><0x0BF><sNIDa>](6) NID

   Optional Interaction Rejected
   This packet indicates that a node can not participate in a protocol.  

   [<pri><6><dNIDa><sNIDa>](2) 0x0C MTI

   Terminate Due to Error
   This indicates that a node cannot proceed with a protocol.  

   [<pri><6><dNIDa><sNIDa>](2) 0x0D MTI

   Event Exchange Messages

   Identify Consumers
   Request nodes report interest in an event, as a consumer.  

   [<pri><0><0x24F><sNIDa>](8) EID

   Consumer Identify Range
   A node reporting interest in a range of events, as a consumer, as indicated by a mask.  

   [<pri><1><0x25F><sNIDa>](8) Event-mask

   Consumer Identified
   A node is reporting interest in an event, as a consumer.

   [<pri><1><0x26><11vu><sNIDa>](8) EID

   Identify Producer
   Request nodes report interest in an event, as a producer.  

   [<pri><0><0x28F><sNIDa>](8) EID

   Producer Identify Range
   A node is reporting interest in a range of events, as a producer, as indicated by a mask.  

   [<pri><1><0x29F><sNIDa>](8) Event-mask

   Producer Identified
   A node is reporting interest in an event, as a consumer.

   [<pri><1><0x2A><11vu><sNIDa>](8) EID

   Identify Events
   Request to report all events, to a specific or all nodes.

   [<pri><6><dNIDa><sNIDa>](1) 0x2B – specific node

   [<pri><0><0x02B><sNIDa>](0)  - all nodes

   Learn Event
   Teach a specific event to all nominated event slots.  

   [<pri><0><0x2CF><sNIDa>](8) EID

   P/C Event Report (event message)
   Basic event packet.  

   [<pri><0><0x2DF><sNIDa>](8) EID

    

    

    

    

   Table of Contents

   2. Transports

   3. Common Protocol Frame Definition

   MTI – Message Type Identifier:

   sNID – Source Node ID:

   dNID – Destination Node ID:

   Event ID:

   Flags-byte:

   Data:

   4. Common Protocol

   5. CAN Protocol

   Forms:

   Formats:

   Basic Messages:

   Management Messages:

    
