                                        OpenLCB Technical Introduction

   OpenLCB has been designed as a layered system of communications between “nodes”. It provides unified
   communication and operation for individual low-cost boards through high-end computers. This note
   provides a technical introduction to OpenLCB, along with references to additional information.

   The bottom layer provide a standard mechanism for sending and receiving common format1 messages2 via
   reliable transport media. Adaptations are defined for specific transport media, initially Controller
   Area Network (CAN)3, TCP/IP4, in addition to the native format in computer memory. This layer defines
   mechanisms for declaring that a node is operational, routing and gatewaying messages, enquiring about
   existing nodes, and parsing the basic messages5. The protocol is based on globally unique 6-byte Node
   IDs. It defines multiple methods for ensuring uniqueness6 of these Node IDs.

   At the next level, OpenLCB defines standard methods for communicating between nodes:

     * Datagrams7 can efficiently move up to 70 bytes from one specific node to another. Buffer management
       for small nodes is explicitly considered; datagrams are retransmitted when the receiving node is
       temporarily short of resources.

     * Events8 are short (8-byte) messages that propagate to all nodes that have registered to receive
       them.  Typically these are used in Producer/Consumer communication for layout control, but they can
       also be used for other purposes. Uniqueness of event ID codes is ensured via several mechanisms that
       can be implemented in even the smallest nodes.9 The protocol provides messages to enquire about
       which events a given node can transmit and wishes to receive, which allows automated routing and
       gatewaying of these messages.

     * Streams10 are an efficient method for moving large amounts of data from one specific node to
       another.  Multiple streams can be exchanged at the same time, both between different nodes and
       between a specific pair of nodes (except on CAN segments). Buffer management at the end nodes and at
       any nodes along the path is negotiated through the protocol.  The protocol specifies methods for
       negotiating stream IDs so that independent implementations can be used in the end points.

   OpenLCB then builds protocols for common functions on top of these basic communication methods.

     * Producer/Consumer Layout Control11

     * Simple button-based configuration12

     * Remote configuration13

     * Fast clock operation and coordination14

     * Information display15

     * Node Identification and Confirmation16

     * Use with external systems, e.g. LocoNet17, DCC18

     * Central error logging19

   (Many of these are works in progress, and there is much to do if people want to get involved.)
   Additional capabilities can be built here, or on top of these.

   OpenLCB is being developed via a non-proprietary, collaborative process centered on an openly available
   documentation and code store20. Development proceeds in parallel along several dimensions:

     * Documents21 - Beyond just tables of bits, OpenLCB is developing high-level design documents, use
       cases22, and the rest of a complete documentation package for eventual standards.

     * Prototypes – Prototype code23 is being developed in Java and C/C++. The Java code works both
       stand-alone and within JMRI24.  The C/C++ code works both standalone and within the Arduino25. This
       codebase allows easy development of sample implementations, for example the OpenLCB servo driver26,
       which was less than 30 lines of code in addition to the prototype.

     * Test code – Test code is being developed in Python, Java27 and C/C++28 to exercise the OpenLCB
       design in more detail than can be done with prototypes. This allows simulation of large and small
       layouts, test of error conditions, and the exploration of special cases needed to create a reliable
       standard.

   The group works via Skype and the OpenLCB Yahoo site29, with file collaboration via SVN. All
   contributions are made available subject to the OpenLCB license terms.30

   More than just creating specific software and hardware, the goal of the OpenLCB group is to create a
   ecosystem within which hobbyists and manufacturers can both create great stuff for model railroads. We
   understand that people will want to use OpenLCB with many types of software and hardware, so we work to
   ensure that OpenLCB is not implementation-specific. OpenLCB has built in extensive tools for discovering
   nodes and their properties, so that separate implementations can learn about each other and work
   together.31  For example, OpenLCB defines how one node can learn about the configuration options
   available in another node without human intervention.32 By carefully considering how implementations may
   differ, yet still interoperate reliably, OpenLCB is creating a truly general standard.

     ----------------------------------------------------------------------------------------------------

   1 http://openlcb.org/trunk/documents/CommonMessageFormat.html

   2 http://openlcb.org/trunk/documents/CommonMessageDefinitions.html

   3 http://openlcb.org/trunk/documents/can/index.html

   4 http://openlcb.org/trunk/documents/binary/index.html

   5 http://openlcb.org/trunk/documents/StandardInteractions.html

   6 http://openlcb.org/trunk/documents/NidUniqueAssignment.html

   7 http://openlcb.org/trunk/documents/DatagramProtocol.html

   8 http://openlcb.org/trunk/documents/EventExchangeProtocol.html

   9 http://openlcb.org/trunk/documents/EventIdUniqueAssignment.html

   10 http:/openlcb.org/trunk/documents/StreamProtocol.html

   11 http://openlcb.org/trunk/documents/notes/ProducerConsumerModel.html

   12 http://openlcb.org/trunk/documents/examples/EventConfigurationProtocol.html

   13 http://openlcb.org/trunk/documents/notes/Configuration.html

   14 http://openlcb.org/trunk/documents/examples/FastClock.html

   15 http://openlcb.org/trunk/documents/notes/DisplayProtocol.html

   16 http://openlcb.org/trunk/documents/notes/IdentMethod.html

   17 http://openlcb.org/trunk/documents/notes/LocoNetConnections.html

   18 http://openlcb.org/trunk/documents/notes/UseWithDCC.html

   19 http://openlcb.org/trunk/documents/notes/Logging.html

   20 http://sourceforge.net/projects/openlcb/develop

   21 http://openlcb.org/trunk/documents/index.html

   22 http://openlcb.org/trunk/documents/OpenLCB-Use-Cases.pdf

   23 http://openlcb.org/trunk/prototypes/index.html

   24 http://jmri.org

   25 http://www.arduino.cc/

   26 http://openlcb.org/trunk/prototypes/Arduino/sketches/OlcbServoNode/OlcbServoNode.pde

   27 http://openlcb.org/trunk/prototypes/java/index.html

   28 http://openlcb.org/trunk/prototypes/C/index.html

   29 http://groups.yahoo.com/group/openlcb/

   30 http://www.openlcb.org/Licensing.html

   31 http://openlcb.org/trunk/documents/StandardInteractions.html#discovery

   32 http://openlcb.org/trunk/documents/notes/Configuration.html#discovery
