                                                1 Introduction

   This Technical Note contains informative discussion and background for the corresponding “OpenLCB Unique
   Identifiers Specification”. This explanation is not normative in any way.

   Originally, OpenLCB was defined in terms of 48-bit unique “node IDs”.  Other uses were found for these
   IDs that didn't associate them with a specific node, which demonstrated the need for unique IDs beyond
   just node IDs.  Therefore, the Standard and this Technical Note are generally written in terms of unique
   IDs, which includes use as node IDs.  

                                      2 Annotations to the Specification

   This section provides background information on corresponding sections of the Specification document.
   It's expected that two documents will be read together.

2.1 Introduction

2.2 Intended Use

   The "globally unique" requirement only refers to the universe of connected nodes; nodes that never need
   to communicate with each other need not have separate Node IDs. In general, however, nodes can move:
   They can be sold or loaned for use on another layout, nodes on modular layouts can be connected to other
   arbitrary modules, and few assumptions can be made. It's best if nodes are given a completely unique ID
   when manufactured, so there's no need to ever detect and resolve a conflict.

2.3 References and Context

2.4 Content and Format

   The Standards don't require any particular human-readable format for input and output, but hex-pairs
   with separators, e.g. 01.AB.34.01.CD.E3, are recommended by the Common Information TN. If any other
   format is used, including decimal pairs, it's very important to make it clear how to interpret it.

   There are many methods to store a unique identifier, and that's not constrained by this Standard. It
   could be stored in a non-volatile memory, as jumpers on a board, etc.

2.5 Allocation

   Unique IDs are assigned via a delegation process. At the highest level, ranges are assigned to people
   and organizations, within which they are responsible for assigning unique identifiers to separate
   devices. These ranges can be subdivided and delegated further, as needed. Additional ranges can then be
   requested, which will be recorded here or eventually in some online system accessible to anybody.

   One of the reasons for having a long, 48-bit unique identifier space is to make it easier to use a
   delegation system like this.  Because there are a lot of possible unique identifiers, large ranges can
   be delegated to groups without having to ensure that the range be efficiently used.  For example, most
   NMRA members will not design their own OpenLCB nodes and need to assign node IDs, but assigning a range
   to every member makes it easy for those who want to, at a total cost of only 0.000016 of the available
   unique identifier space.

   In these delegated assignments, the lower order byte(s) are self-assigned. The value of zero should be
   reserved, indicating that a number within the range hasn't been assigned.

   The high byte of each range is different for each type of assignment, making it easy to determine the
   allocation pattern in use for a particular unique identifier.

   Allocations are meant to be unique forever, so the specification requires that new allocation ranges not
   overlap existing ones, and allocation regions not be reused later.

  2.5.1 Unique identifiers assigned by manufacturers

   As an initial simplification, and to encourage manufacturers to adopt OpenLCB, a group of 224
   identifiers will be assigned to each manufacturer with an NMRA manufacturer ID number. Manufacturers can
   assign any unique identifier from within their range to a board so long as each identifier is only
   assigned to at most one node. There's no requirement that they be assigned sequentially, or by type, or
   in any other order.

   The NMRA has defined ID number 238 for future expansion with in the existing 8-bit ID space, but has not
   determined how to use it. When 238 is finally used to identify a new set of manufacturers, those
   manufacturers can be assigned OpenLCB ranges with a different set of high-order bits.

   Software manufacturers who use software keys can generate the low-order 24 bits from some unique part of
   the software key. Hardware manufacturers need to ensure that resetting a device to “factory defaults”
   doesn't lose the self-assigned part of the Node ID, e.g. the serial number.

  2.5.2 Unique identifiers assigned by members of organized groups

   MERG kit builders and others would like to assign their own identifiers without going through a
   complicated process. To make this possible without any interaction with anybody, these people are
   assigned identifier ranges that involve their member number in the organization. A member may assign any
   identifier from this range to the node(s) they produce, provided that each identifier is assigned to at
   most one node. A range of 255 identifiers per member is sufficient for hobby usage; after building that
   many, the hobbyist can get another, larger assignment. It's also convenient to give hobbyists a byte as
   their range.

   Each organization is assigned a unique high-order two bytes. The organization member number is given 24
   bits.   Byte 2 of the unique identifier advances by 4 between groups (NMRA is 0x00, MERG is 0x04, etc)
   to allow a little more headroom on group membership numbers; this space can be reclaimed later if
   needed.

   Other groups have defined mechanisms to ensure that their node numbers or equivalent constructs are
   uniquely assigned. They may have e.g. non-technical reasons for wishing to use those same mechanisms to
   assign OpenLCB unique identifiers. Ranges of OpenLCB unique identifier ranges can be assigned to these,
   so that when people then use the group's mechanism to select a value within that range, the result will
   be a properly unique OpenLCB unique identifier.

   The first example of this is MERG CBUS developers. MERG CBUS has defined a “no cost” way of identifying
   unique 16-bit Node Number (NN) for CBUS use, perhaps with an optional 16-bit Layout Number (LN). People
   who wish to use this mechanism to allocate unique OpenLCB Node ID identifiers can, without having to
   consult anybody, generate an OpenLCB Node ID from the unique CBUS number(s) as described in the
   Standard.

   If the user is involved in determining the unique identifier for a node (the Node ID), e.g. by setting
   switches, the possibility of duplicated node IDs must be considered. Users make mistakes. To reduce user
   frustration, the node should provide a user-visible way to indicating a duplicate has been seen, and
   should fully implement the relevant wire-protocol-specific methods for detecting duplicate node IDs.

  2.5.3 Unique identifiers assigned by software at run-time

   Programs that act as one or more OpenLCB nodes need to associate unique identifiers with them. For
   licensed software, where a unique key can be associated with each instance of the program, this is easy:
   Use the manufacturer space defined above, and generate the lower bits of a specific ID from the license
   key.

   Free, open and unlicensed software can't use a license-key-based method. Unfortunately, the 48-bit
   address space is too small to use the IP-address-plus-signature GIDs that would otherwise make this a
   simple problem, or the even larger MAC-address-plus-signature GIDs.

   Initial experiments were done using 48-bit IPv4 addresses as components of unique identifiers, but this
   is no longer recommended for several reasons:

     * Not all IPv4 addresses are globally unique.   Some IP addresses correspond to “private networks”,
       which are only locally unique.  See RFC 1918 and RFC 3330 for more information.  In addition,
       Microsoft defined an non-IETF “Automatic Private IP Addressing” mechanism for providing non-global
       IP addresses.

     * A single computer may run several programs, so there still needs to be separate mechanism to provide
       a unique value for the lowest bytes of the ID.  That involves a level of coordination across
       multiple software vendors that's hard to imagine.

     * IPv6 is coming.  It provides addresses that are too large to use directly. Even before that happens,
       the various issues of IPv4 to IPv6 mapping raise all sorts of questions about uniqueness of IPv4
       addresses.

     * Even globally routable IPv4 addresses may not be unique over time.  For example, DCHP may assign the
       same address to multiple computers sequentially.  This is particularly an issue with wireless access
       at e.g. clubs and shows.

   Computers that have global internet access, even if they don't have a permanent and unique IP address,
   can still get a unique ID from an openlcb.org-provided service.  These unique IDs are provided from a
   specified range to ensure they unique when created.  Each ID is only provided once to ensure that they
   remain unique.  Programs using this facility should permanently remember unique IDs obtained this way,
   because they won't get the same one on a later request.

   Other organizations can also distribute unique IDs from within their allocated blocks. For example, an
   ID could be provided when a free-software program is downloaded, perhaps as part of the download package
   or even as part of its filename.

   Programs without access to an ID-providing service must use some other mechanism, which may boil down to
   prompting the user for a unique identifier assigned by one of the other mechanisms.

  2.5.4 Globally defined unique identifiers

   In addition to use as node identifiers (node IDs), OpenLCB unique identifiers are used to ensure
   uniqueness of specific global event identifiers and for other purposes.  These numbers must be allocated
   so that they are kept unique.  The identifiers specified in this section are of that type.

   Note that the detailed use of these identifiers is specified elsewhere. In some cases, the protocols are
   still being developed, and the entry here is just reserving a range for a specific future use.

  2.5.5 Unique identifiers assigned for use with locomotive control systems

   Locomotive control was initially beyond the scope of OpenLCB development, but later work started to
   define OpenLCB methods for working with existing locomotive control systems.  This section specifies
   ranges of unique identifiers that are reserved for the purpose of interfacing with locomotive control.
    The details of how there are to be used are specified elsewhere, but sufficient range has been reserved
   to allow providing decoders with OpenLCB unique identifiers, etc.

  2.5.6 Unique identifier ranges assigned by request

   Users can request blocks of identifiers of various sizes.  The small (256) and medium (65536) blocks are
   not scarce resources. Requests for these blocks should be routinely granted once the requestor has
   identified himself. The 24-bit blocks are slightly scarcer, but there are still almost 216 of them
   available by using additional values for byte 2.  

   An initial automated system for requesting and obtaining unique ID ranges is available at
   http://openlcb.net/trunk/web/requestuidrange.php and subsequent pages.  

  2.5.7 Reserved unique identifiers

   For error detection and future expansion, we permanently reserve all identifiers that start with either
   a 0x00 or 0xFF value. OpenLCB implementations can treat those as errors without causing any problems
   with future expansion.

                                         3 Implementation Information

   Specific unique ID assignments are stored in a MySQL database on the http://openlcb.org website. The
   full list of assignments, include overall ranges from the specification and ranges assigned for specific
   purposes and users, can be found on the http://www.openlcb.org/trunk/web/viewuid.php dynamic page.

   Automated allocation systems can be abused, and we don't want to give away large chunks of address space
   to automated requestors.  All available information about requests is logged. Users are asked for their
   name and contact information at the time of the request, which is also logged.  Depending on our
   experience with requests, we may have to add an email challenge-response or other mechanism to ensure
   only value requests get allocations.

    

   Table of Contents

   1 Introduction

   2 Annotations to the Specification

   2.1 Introduction

   2.2 Intended Use

   2.3 References and Context

   2.4 Content and Format

   2.5 Allocation

   2.5.1 Unique identifiers assigned by manufacturers

   2.5.2 Unique identifiers assigned by members of organized groups

   2.5.3 Unique identifiers assigned by software at run-time

   2.5.4 Globally defined unique identifiers

   2.5.5 Unique identifiers assigned for use with locomotive control systems

   2.5.6 Unique identifier ranges assigned by request

   2.5.7 Reserved unique identifiers

   3 Implementation Information

    
