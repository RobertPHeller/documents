                                         1 Introduction (Informative)

   This document defines a standard for the format of static information that describes the configuration
   options available on an OpenLCB node, called “Configuration Description Information (CDI)”.
   “Configuration Description Information” in this context refers to fixed information available from an
   OpenLCB device, via OpenLCB, so that other devices can properly and correctly configure it.

   This Standard does not address how the CDI is stored, retrieved, or used.

                                         2 Intended Use (Informative)

   CDI is intended to be used by a configurable, self-contained OpenLCB  node to tell a Configuration Tool
   (CT) how to configure the node. The configuration tool will use the CDI information to help the user
   configure all aspects of the node's capabilities.

                                    3 References and Context (Informative)

   For more information on format and presentation, see:

     * OpenLCB Common Information Technical Note

   For information on OpenLCB message transport and OpenLCB communications, see:

     * OpenLCB Standard: Message Network

   For information on XML encoding and XML Schema, see:

     * World Wide Web Consortium (W3C) “Extensible Markup Language (XML)”i

     * World Wide Web Consortium (W3C) “XML Schema”ii

                                            4 Content (normative)

   The configuration description information for a node is invariant while the node has any OpenLCB
   connections in the Initialized state.

   The CDI has three parts:

     * Identification: Provides specific information about the type of the node.

     * ACDI: Indicates that certain configuration information in the node has a standard format.

     * Segments: The configuration information in the node is organized in zero or more segments, each of
       which contains zero or more configurable variables.  A variable is the basic unit of configuration.
       The segment definition specifies the organization of each segment. A segment consists of zero or
       more bytes with a linear address space.

                                             5 Format (normative)

   The CDI is provided as a zero-terminated string of bytes. The bytes encode UTF-8 characters. There is no
   byte-order mark (BOM) at the start of the string. Lines in the string are delimited with 0x12 Newline
   (NL) characters.

   The content defines the configuration description information in XML 1.0 format using a specific XML
   vocabulary defined by an XML Schema. No extensions to XML 1.0 are permitted.

   This version of this Standard specifies version 1.1 of the schema.  That version of the schema is
   defined at http://openlcb.org/schema/1/1/cdi.xsl and in Appendix A of this document.

   The version number of an OpenLCB CDI schema contains two numbers: The major version first, and the minor
   version second.  

   The first line of the CDI is:

   <?xml version="1.0"?>

   to define the XML version of the content.

   The root element of the CDI XML is:

   <cdi xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xsi:noNamespaceSchemaLocation="http://openlcb.org/schema/1/1/cdi.xsd">

   The schema contents are normative.

   Numerical values in attributes and element text shall be specified as decimal numbers.  

5.1 XML Elements

  5.1.1 <identification> Element

  5.1.2 <acdi> Element

  5.1.3 <segment> Element

5.2

                                              6 Future Extension

    

   But we add the <acdi> element to it, so the document isn't really complete; “Other protocols may add,
   but not remove, elements and attributes”?  Remove constraints? How does extensibility work here?

                                              A Appendix: Schema

   <?xml version="1.0" encoding="utf-8"?>

   <?xml-stylesheet href="schema2xhtml.xsl" type="text/xsl"?>

   <!-- XML Schema for OpenLCB Configuration Description Information (CDI)     -->

   <xs:schema version="CDI 1.1" xmlns:xs="http://www.w3.org/2001/XMLSchema"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">

    

     <xs:complexType name="mapType">

       <xs:annotation>

         <xs:documentation>

           A map relates one or more property elements (keys)

           to specific values.

         </xs:documentation>

       </xs:annotation>

       <xs:sequence>

         <xs:element name="name" minOccurs="0" maxOccurs="1" />

         <xs:element name="description" minOccurs="0" maxOccurs="1" />

         <xs:element name="relation" minOccurs="0" maxOccurs="unbounded">

           <xs:complexType>

             <xs:sequence>

               <xs:element name="property" minOccurs="1" maxOccurs="1" />

               <xs:element name="value" minOccurs="1" maxOccurs="1" />

             </xs:sequence>

           </xs:complexType>

         </xs:element>

       </xs:sequence>

     </xs:complexType>

    

     <xs:complexType name="groupType">

       <xs:sequence>

         <xs:element name="name" minOccurs="0" maxOccurs="1" />

         <xs:element name="description" minOccurs="0" maxOccurs="1" />

         <xs:element name="repname" minOccurs="0" maxOccurs="1" />

         <xs:choice minOccurs="0" maxOccurs="unbounded">

           <xs:annotation>

             <xs:documentation>

               Allows any sequence of the contained element types

             </xs:documentation>

           </xs:annotation>

           <xs:element name="group" type="groupType" minOccurs="0" maxOccurs="1" />

           <xs:element name="bit" type="bitType" minOccurs="0" maxOccurs="1" />

           <xs:element name="string" type="stringType" minOccurs="0" maxOccurs="1" />

           <xs:element name="int" type="intType" minOccurs="0" maxOccurs="1" />

           <xs:element name="eventid" type="eventidType" minOccurs="0" maxOccurs="1" />

         </xs:choice>

       </xs:sequence>

       <xs:attribute name="offset" type="xs:int" default="0">

         <xs:annotation>

           <xs:documentation>

             Positive or negative offset between the address of

             the previous element and the start of this group's contents.

           </xs:documentation>

         </xs:annotation>

       </xs:attribute>

       <xs:attribute name="replication" type="xs:int" default="1" />

     </xs:complexType>

    

     <xs:complexType name="eventidType">

       <xs:sequence>

         <xs:element name="name" minOccurs="0" maxOccurs="1" />

         <xs:element name="description" minOccurs="0" maxOccurs="1" />

         <xs:element name="map" type="mapType" minOccurs="0" maxOccurs="1" />

       </xs:sequence>

       <xs:attribute name="offset" type="xs:int" default="0">

         <xs:annotation>

           <xs:documentation>

             Positive or negative offset between the address of

             the end of previous element and the start of

             this elements's contents.

           </xs:documentation>

         </xs:annotation>

       </xs:attribute>

     </xs:complexType>

    

     <xs:complexType name="intType">

       <xs:sequence>

         <xs:element name="name" minOccurs="0" maxOccurs="1" />

         <xs:element name="description" minOccurs="0" maxOccurs="1" />

         <xs:element name="min" minOccurs="0" maxOccurs="1" />

         <xs:element name="max" minOccurs="0" maxOccurs="1" />

         <xs:element name="default" minOccurs="0" maxOccurs="1" />

         <xs:element name="map" type="mapType" minOccurs="0" maxOccurs="1">

           <xs:annotation>

             <xs:documentation>

               The 'value' of each entry is displayed, and

               the 'property' content (number) is sent

               to/from the node

             </xs:documentation>

           </xs:annotation>

         </xs:element>

       </xs:sequence>

       <xs:attribute name="size" type="xs:int" default="1">

         <xs:annotation>

           <xs:documentation>

             Storage size of this variable in bytes.

           </xs:documentation>

         </xs:annotation>

       </xs:attribute>

       <xs:attribute name="offset" type="xs:int" default="0">

         <xs:annotation>

           <xs:documentation>

             Positive or negative offset between the

             address of the end of previous element and the

             start of this elements's contents.

             Offset of zero means that this element starts

             immediately after the previous one.

           </xs:documentation>

         </xs:annotation>

       </xs:attribute>

     </xs:complexType>

    

     <xs:complexType name="bitType">

       <xs:sequence>

         <xs:element name="name" minOccurs="0" maxOccurs="1" />

         <xs:element name="description" minOccurs="0" maxOccurs="1" />

         <xs:element name="map" type="mapType" minOccurs="0" maxOccurs="1">

           <xs:annotation>

             <xs:documentation>

               The 'value' of each entry is displayed, and

               the 'property' content (number) is sent to/from the node

             </xs:documentation>

           </xs:annotation>

         </xs:element>

       </xs:sequence>

       <xs:attribute name="size" type="xs:int" default="1">

         <xs:annotation>

           <xs:documentation>

             Storage size of this variable in bits.

           </xs:documentation>

         </xs:annotation>

       </xs:attribute>

       <xs:attribute name="offset" type="xs:int" default="0">

         <xs:annotation>

           <xs:documentation>

             Positive or negative offset between the address of the

             previous element and the start of this group's contents.

             Offset of zero means that this element starts immediately

             after the previous one.

           </xs:documentation>

         </xs:annotation>

       </xs:attribute>

     </xs:complexType>

    

     <xs:complexType name="stringType">

       <xs:sequence>

         <xs:element name="name" minOccurs="0" maxOccurs="1" />

         <xs:element name="description" minOccurs="0" maxOccurs="1" />

         <xs:element name="map" type="mapType" minOccurs="0" maxOccurs="1" />

       </xs:sequence>

       <xs:attribute name="size" type="xs:int" use="required">

         <xs:annotation>

           <xs:documentation>

             Storage size of this variable in bytes.

             This includes the trailing null byte that

             terminates the string content.

           </xs:documentation>

         </xs:annotation>

       </xs:attribute>

       <xs:attribute name="offset" type="xs:int" default="0">

         <xs:annotation>

           <xs:documentation>

             Positive or negative offset between the address of the

             previous element and the start of this group's contents.

             Offset of zero means that this element starts

             immediately after the previous one.

           </xs:documentation>

         </xs:annotation>

       </xs:attribute>

     </xs:complexType>

    

     <xs:element name="cdi">

       <xs:annotation>

         <xs:documentation>

           This is the schema for Configuration

           Description Information (cdi)

         </xs:documentation>

       </xs:annotation>

       <xs:complexType>

         <xs:sequence>

           <xs:element name="identification" minOccurs="0" maxOccurs="1">

             <xs:annotation>

               <xs:documentation>

                 Common first element to identify the decoder

               </xs:documentation>

             </xs:annotation>

             <xs:complexType>

               <xs:sequence>

                 <xs:element name="manufacturer" minOccurs="0" maxOccurs="1" />

                 <xs:element name="model" minOccurs="0" maxOccurs="1" />

                 <xs:element name="hardwareVersion" minOccurs="0" maxOccurs="1" />

                 <xs:element name="softwareVersion" minOccurs="0" maxOccurs="1" />

                 <xs:element name="map" type="mapType" minOccurs="0" maxOccurs="1">

                   <xs:annotation>

                     <xs:documentation>

                       This map can be used to add arbitrary key/value

                       descriptions of the node.

                     </xs:documentation>

                   </xs:annotation>

                 </xs:element>

               </xs:sequence>

             </xs:complexType>

           </xs:element>

           <xs:element name="acdi" minOccurs="0" maxOccurs="1">

             <xs:annotation>

               <xs:documentation>

                 Element that identifies that memory information is available

                 as defined by the Abbreviated Common Description Information

                 (ACDI) standard.

               </xs:documentation>

             </xs:annotation>

             <xs:complexType>

               <xs:attribute name="fixed" type="xs:int" default="4">

                 <xs:annotation>

                   <xs:documentation>

                     The decimal version number of the format for the fixed

                     definition information. See ACDI Specification.

                   </xs:documentation>

                 </xs:annotation>

               </xs:attribute>

               <xs:attribute name="var" type="xs:int" default="2">

                 <xs:annotation>

                   <xs:documentation>

                     The decimal version number of the format for

                     the variable definition information.  See ACDI Specification.

                   </xs:documentation>

                 </xs:annotation>

               </xs:attribute>

             </xs:complexType>

           </xs:element>

           <xs:element name="segment" minOccurs="0" maxOccurs="unbounded">

             <xs:annotation>

               <xs:documentation>

                 Define the contents of a memory space

               </xs:documentation>

             </xs:annotation>

             <xs:complexType>

               <xs:sequence>

                 <xs:element name="name" minOccurs="0" maxOccurs="1" />

                 <xs:element name="description" minOccurs="0" maxOccurs="1" />

                 <xs:choice minOccurs="0" maxOccurs="unbounded">

                   <xs:annotation>

                     <xs:documentation>

                       Allows any sequence of the contained element types

                     </xs:documentation>

                   </xs:annotation>

                   <xs:element name="group" type="groupType" minOccurs="0" maxOccurs="1">

                     <xs:annotation>

                       <xs:documentation>

                         Allows grouping and replication of multiple locations.

                       </xs:documentation>

                     </xs:annotation>

                   </xs:element>

                   <xs:element name="bit" type="bitType" minOccurs="0" maxOccurs="1">

                     <xs:annotation>

                       <xs:documentation>

                         Describes a bit field in the data.

                         The field can be considered either a number,

                         or a set of specific coded values via a map.

                       </xs:documentation>

                     </xs:annotation>

                   </xs:element>

                   <xs:element name="string" type="stringType" minOccurs="0" maxOccurs="1">

                     <xs:annotation>

                       <xs:documentation>

                         Describes a human-readable UTF-8 string in the data.

                       </xs:documentation>

                     </xs:annotation>

                   </xs:element>

                   <xs:element name="int" type="intType" minOccurs="0" maxOccurs="1">

                     <xs:annotation>

                       <xs:documentation>

                         Describes an integer value in the data.

                         The field can be considered either a number,

                         or a set of specific coded values via a map.

                       </xs:documentation>

                     </xs:annotation>

                   </xs:element>

                   <xs:element name="eventid" type="eventidType" minOccurs="0" maxOccurs="1">

                     <xs:annotation>

                       <xs:documentation>

                         Describes an 8-byte Event ID in the data.

                       </xs:documentation>

                     </xs:annotation>

                   </xs:element>

    

   <!--

                   XML Schema 1.1 construct expressing extensibility promise

                   <xs:any minOccurs="0" maxOccurs="1" processContents="lax">

                   <xs:assert test="every $x in * satisfies

                                       (exists($x/@size) and $x/@size castable to xs:integer)"/>

                   <xs:assert test="every $x in * satisfies

                                       (exists($x/@offset) and $x/@offset castable to xs:integer)"/>

                     <xs:annotation>

                       <xs:documentation>

                         Extension point for future schema

                       </xs:documentation>

                     </xs:annotation>

                   </xs:any>

    -->

    

                 </xs:choice>

               </xs:sequence>

               <xs:attribute name="space" type="xs:int" use="required">

                 <xs:annotation>

                   <xs:documentation>

                     The decimal number of the address space where the information is found.

                   </xs:documentation>

                 </xs:annotation>

               </xs:attribute>

               <xs:attribute name="origin" type="xs:int" default="0">

                 <xs:annotation>

                   <xs:documentation>

                     Starting address of the segment's contents

                     within the memory space.

                   </xs:documentation>

                 </xs:annotation>

               </xs:attribute>

             </xs:complexType>

           </xs:element>

         </xs:sequence>

       </xs:complexType>

     </xs:element>

   </xs:schema>

    

   Table of Contents

   1 Introduction (Informative)

   2 Intended Use (Informative)

   3 References and Context (Informative)

   4 Content (normative)

   5 Format (normative)

   5.1 XML Elements

   5.1.1 <identification> Element

   5.1.2 <acdi> Element

   5.1.3 <segment> Element

   5.2

   6 Future Extension

   A Appendix: Schema

    

   i http://www.w3.org/XML/

   ii http://www.w3.org/XML/Schema
