                                                1 Introduction

   OpenLCB uses the “Simple Node Protocol” concept to distinguish a subset of global message types that are
   never needed by certain “simple” nodes. They can then be rapidly ignored by those nodes, gateways can
   filter them out, etc. This note describes the Simple Node Protocol. It is not normative on node
   implementors.

   Simple nodes are defined as the leaf nodes that do basic layout control (input/output) operations. These
   nodes need to be able to

     * indicate their presence (by sending Initialization Complete messages and replying to Verify Node
       messages)

     * send and receive event reports (through PCER messages and associated reports)

     * be configured (through related messages, datagrams and in some cases streams)

   and perhaps other things in the future. Those messages form the Simple Node Protocol subset of the full
   OpenLCB protocols. Note that this is an asymmetric subset:  Simple nodes can send some types of messages
   and receive others.

   On the other hand, gateways, configuration tools and other network-aware nodes are not simple nodes.
   These nodes need access to the full OpenLCB protocol so they can

     * learn about the appearance of other nodes (by receiving Initialization Complete messages)

     * learn about other producers and consumers (by receiving status messages)

   and similar. To do this, they must be able to send and receive every message type.

   For ease of filtering, a specific bit in the MTI identifies the global messages needed by simple nodes.
   This bit allows OpenLCB to define new MTIs in the future and still include them in the “simple node
   protocol” subset or outside it without having to modify existing nodes. See the MTI allocation TN for
   more information on this.  

   Gateways that are serving network segments (e.g. single CAN segments) that contain only simple nodes may
   suppress unaddressed (global) messages that do not contain simple-node MTIs.

                                            2 Protocol Description

   Operationally, the simple node protocol is defined by the MTIs that carry a set Simple Node bit, plus
   all addressed messages. This section summarize received transmitted messages, and describes the
   reasoning behind those choices in the current MTI definitions.

2.1 Messages Transmitted

   Simple nodes may transmit any message, which must propagate correctly.

2.2 Messages Received

   Simple nodes must receive any message specifically addressed to them, plus the following unaddressed
   global messages:

     * Verify Node ID – They need to receive this so that they can reply to it.

     * Verified Node ID – They need to receive this because it's the reply to their own request, which
       might be used to e.g. locate a node for delayed sending of status

     * Protocol Support Inquiry – They need to receive this so that they can reply to it.

     * Identify Consumers, Identify Producers, Identify Events – because others will ask this of them

     * Learn Event – so they can be programmed

     * P/C Event Report – what they do for a living

   In the future, additional MTIs will be defined. If simple nodes need to received them, the MTI will
   indicate that; see the MTI Allocation TN.

2.3 Messages Not Received

   Messages not listed in the section above do not need to be received by simple nodes.

   A brief description of why the following message types are not necessary for simple nodes:

     * Initialization Complete: Used to indicate that a node is newly available to the network. Simple
       nodes only care about their specific tasks, and by definition are not interested in the overall
       structure and availability of the network.

     * Consumer Identified, Consumer Identify Range: These are of interest to gateways and configuration
       tools, but an individual producer does not need to know which (if any) nodes are consuming its
       produced events.

     * Producer Identified, Producer Identify Range: These are of interest to gateways and configuration
       tools, but an individual consumer does not need to know which (if any) nodes are producing its
       consumed events.

     *  

   Table of Contents

   1 Introduction

   2 Protocol Description

   2.1 Messages Transmitted

   2.2 Messages Received

   2.3 Messages Not Received

    
