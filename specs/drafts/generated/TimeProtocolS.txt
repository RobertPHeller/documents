                                         1 Introduction (Informative)

   A layout control bus can do a number of useful things with fast-time information:

     * Connect a number of clock displays to keep them synchronized.

     * Provide time displays on plug-in devices, e.g. throttles.

     * Provide cueing for time-based occurrences, such as lights turning on and off at specific modeled
       times.

   Generally, existing fast clock systems have one unit that produces time information, here called a clock
   generator, and one or more units that consume it. It is typically sufficitne to report minutes, not
   seconds or finer time divisions. Some existing fast clock systems track a day/date in addition to time.

   Fast clocks run at various rates, and can be controlled by the user either at the clock generator or
   from other locations. Some fast clock systems broadcast run/stop and rate information, which can also be
   useful when interpolating within a fast-minute or between time broadcasting messages.

   The OpenLCB protocol presented in this doucment broadcasts time information by producing events with a
   specific structure of IDs, corresponding to specific times with the day, for example “08:10”. This
   allows consumers to be taught to react to time-of-day. The year and date are handled separately for
   those installations that choose to use it.

                                         2 Intended Use (Informative)

   The primary use of this information is to display time on clock faces around the layout.

   Since remote control of the fast clock is desired, a protocol for setting up the time producer using
   produced and consumed events is defined. This makes it possible for throttles and other nodes with user
   interface to have a general fast-clock-control capability built in.

   In addition, simple nodes can use specific EventIDs to trigger their actions at specific times. For
   example, lights in buildings in a model town can be sequenced to come on at various times by configuring
   consumers in a node to react to time events by changing output lines. Most importantly, in this use
   case, the consuming node does not need to be aware that the event is related to time.

                                     3 References and Context (Normative)

   This specification is in the context of the following OpenLCB-CAN Standards:

     * OpenLCB Event Transport Standard, which defines messages for transporting Event IDs and identifying
       producers and consumers.

     * The OpenLCB Event Identifiers Standard, which defines the format and content of Event IDs including
       the class of Well-Known Event IDs and Automatically-Routed Event IDs.

     * OpenLCB Unique Identifiers Standard, which defines the allocation of OpenLCB 48-bit unique
       identifiers.

   For more information on format and presentation, see:

     * OpenLCB Common Information Technical Note

                                        4 Message Formats (Normative)

   This Standard defines a number of Event IDs.

    

   The upper six bytes of the event IDs defined in the following subsections shall be one of the following:

     * 01.01.00.00.01.00 – referred to as “Default Fast Clock”

     * 01.01.00.00.01.01 – referred to as “Default Real-time Clock”

     * 01.01.00.00.01.02 – referred to as “Alternate Clock 1”

     * 01.01.00.00.01.03 – referred to as “Alternate Clock 2”

     * a valid unique ID under the control of the manufacturer of the clock generator node

     * a valid unique ID under the control of the person or organization configuring the clock generator
       node

   The upper six bytes are referred to as the “Specific Upper Part” in the subsections below. In portions
   of this document, the “Specific Upper Part is also represented by the notation XX.XX.XX.XX.XX.XX.

4.1 Report Time Event ID

   Byte 0 Byte 1 Byte 2 Byte 3 Byte 4 Byte 5 Byte 6    Byte 7  
   Specific Upper Part                       Hours     Minutes 
                                             0x00-0x17 0-59    

   The upper nibble of byte 6 is only 0 or 1, which can be used to distinguish this format.

4.2 Report Date Event ID

   Byte 0 Byte 1 Byte 2 Byte 3 Byte 4 Byte 5 Byte 6     Byte 7 
   Specific Upper Part                       0x20+Month Day    
                                             0x21-0x2C  1-31   

   The upper nibble of byte 6 is 2, which can be used to distinguish this format.

4.3 Report Year Event ID

   Byte 0 Byte 1 Byte 2 Byte 3 Byte 4 Byte 5 Byte 6 Byte 7 
                                             0x3000+Year
   Specific Upper Part                              
                                             0x3000-0x3FFF

   The upper nibble of byte 6 is 3, which can be used to distinguish this format.

   The lower twelve bits are the year, 0AD to 4095AD.

4.4 Report Rate Event ID

   Byte 0 Byte 1 Byte 2 Byte 3 Byte 4 Byte 5 Byte 6 Byte 7 
   Specific Upper Part                       0x4000+Rate

   The upper nibble of byte 6 is 4, which can be used to distinguish this format.

   Rate is a 12 bit signed fixed point rrrrrrrrrr.rr, -511.75, -511.00, …, -1.00, …, -.025, 0.0, 0.25,
   0.50, ..., 511.75

4.5 Report Intermediate Time Event ID

   Byte 0 Byte 1 Byte 2 Byte 3 Byte 4 Byte 5 Byte 6    Byte 7  
   Specific Upper Part                       Hours     Minutes 
                                             0x50-0x67 0-59    

   The upper nibble of byte 6 is only 5 or 6, which can be used to distinguish this format.

4.6 Set Time Event ID

   Byte 0 Byte 1 Byte 2 Byte 3 Byte 4 Byte 5 Byte 6  Byte 7  
   Specific Upper Part                       Hours   Minutes 
                                             0x80+97 0-59    

   The upper nibble of byte 6 is only 8 or 9, which can be used to distinguish this format.

4.7 Set Date Event ID

   Byte 0 Byte 1 Byte 2 Byte 3 Byte 4 Byte 5 Byte 6     Byte 7 
   Specific Upper Part                       0xA0+Month Day    
                                             0xA1-0xAC  1-31   

   The upper nibble of byte 6 is A, which can be used to distinguish this format.

4.8 Set Year Event ID

   Byte 0 Byte 1 Byte 2 Byte 3 Byte 4 Byte 5 Byte 6 Byte 7 
                                             0xB000+Year
   Specific Upper Part                              
                                             0xB000-0xBFFF

   The upper nibble of byte 6 is B, which can be used to distinguish this format.

   The lower twelve bits are the year, 0AD to 4095AD.

4.9 Set Rate Event ID

   Byte 0 Byte 1 Byte 2 Byte 3 Byte 4 Byte 5 Byte 6 Byte 7 
   Specific Upper Part                       0xC000+Rate

   The upper nibble of byte 6 is C, which can be used to distinguish this format.

4.10 Latch Settings Event ID

   Byte 0 Byte 1 Byte 2 Byte 3 Byte 4 Byte 5 Byte 6 Byte 7 
   Specific Upper Part                       0xF000 

   The upper nibble of byte 6 is F, which can be used to distinguish this format.

4.11 Stop/Start Event ID

   Byte 0 Byte 1 Byte 2 Byte 3 Byte 4 Byte 5 Byte 6 Byte 7 
                                             Stop 0x6001
   Specific Upper Part                              
                                             Start 0x6002

   The upper nibble of byte 6 is 6, which can be used to distinguish this format.

4.12 Undefined/Reserved Event ID’s

   Byte 0 Byte 1 Byte 2 Byte 3 Byte 4 Byte 5 Byte 6                  Byte 7                 
   Specific Upper Part                       All byte 6 and byte 7 values not defined above

   All undefined byte 6 and byte 7 values are reserved for future use. They shall not be sent. If received,
   they shall be ignored.

                                             5 States (Normative)

   Each clock has an independent current time, independent running/stopped state and an independent rate.

   When the clock is in stopped state, its time is not changing.

   When the clock is in running state, its internal time is advancing (rate X) as fast as normal time.  

                                          6 Interactions (Normative)

   In order to ensure that time is only ever represented as an atomic operation, changes in Rate, Year,
   and/or Date may optionally become valid upon reception of the next Report Time Event or Report
   Intermediate Time Event.

6.1 Startup

   When a clock generator starts to operate, it shall send a Producer Range Identified message covering the
   whole 16-bit range of the clock’s 6-byte “Specific Upper Part”. Additionally, the clock generator shall
   send a Producer Identified as Currently Valid message for exactly one the Stop Event ID or the Start
   Event ID corresponding with its current start/stop state. Clock consumers shall send either a Consumer
   Range Identified message covering the whole 16-bit range of the clock’s 6-byte “Specific Upper Part” or
   individual Consumer Identified messages for each individual time event consumed.

  6.1.1 Clock Generator

   When a clock on a clock generator is started (from a previously stopped or power up state), upon
   reception of a Latch Settings Event, or upon reception of a Identify producer message for the Event ID
   XX.XX.XX.XX.XX.XX.00.00, it shall produce the following events in the following specific order
   representing a single atomic time:

    1. Report Rate

    2. Report Year

    3. Report Date

    4. One of the following events

         1. Report Intermediate Time, if the seconds count is not equal to zero

         2. Report Time, if the seconds count is equal to zero

    5. Report Time (continuously as described in section 6.2 below, only if clock is running)

  6.1.2 Clock Consumer

   A clock consumer can request the current running state of a clock by sending an Identify Producer
   message for either of the Start or Stop Clock Events.  If a clock generator for the given clock exists,
   it shall respond with the corresponding Producer Identified as currently Valid or Invalid as
   appropriate.

6.2 Clock Report

   If no consumer of a given clock event has been identified, the clock generator is not required to
   produce it.

   While running, a clock generator shall send a Report Time Event no more frequently than once per real
   world minute with the following exceptions:

    1. When the time rolls over to hour 0 and minute 0, the entire in order sequence described in section
       6.1.1 above.  This ensures that the year and date are correctly reflected as a result of the
       rollover.

    2. The clock generator has previously received a Consumer Identified message for a specific Report
       Year, Date, or Time Event, in which case it will always generate this event when appropriate.

   It is the responsibility of clock consumers to keep track of intermediate time between Report Time
   Events. The standard purposely does not define how a clock consumer internally implements time.  If a
   clock consumer wants to get the current time in minute resolution, it shall do so by sending an Identify
   Producer message using the Event ID  XX.XX.XX.XX.XX.XX.50.00.

6.3 Clock Set

   Any node may configure a clock generator. It is not a requirement that a clock generator support the
   capability to change its configuration using events. If Set Rate, Set Year, Set Date, and/or Set Time
   Event(s) are received, the clock generator does not make the change effective until a Latch Settings
   Event is received.  Upon receiving a Latch Settings Event, the entire in order sequence described in
   section 6.1.1 above shall be sent by the clock generator.

   If a Set Rate Event is received by the clock generator, the clock generator's rate may be, but is not
   required to be, set to the rate embedded in the event. If the clock producer does not support the
   requested rate, it shall move to the closest non-zero supported rate.  The clock-generator shall
   subsequently, send the entire in order sequence described in section 6.1.1 above. The rate may be set
   while the clock is running or stopped.

    

   Table of Contents

   1 Introduction (Informative)

   2 Intended Use (Informative)

   3 References and Context (Normative)

   4 Message Formats (Normative)

   4.1 Report Time Event ID

   4.2 Report Date Event ID

   4.3 Report Year Event ID

   4.4 Report Rate Event ID

   4.5 Report Intermediate Time Event ID

   4.6 Set Time Event ID

   4.7 Set Date Event ID

   4.8 Set Year Event ID

   4.9 Set Rate Event ID

   4.10 Latch Settings Event ID

   4.11 Stop/Start Event ID

   4.12 Undefined/Reserved Event ID’s

   5 States (Normative)

   6 Interactions (Normative)

   6.1 Startup

   6.1.1 Clock Generator

   6.1.2 Clock Consumer

   6.2 Clock Report

   6.3 Clock Set

    
